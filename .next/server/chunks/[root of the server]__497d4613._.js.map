{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/74run/my-next-app/src/app/api/chat/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { Groq } from 'groq-sdk';\n\ninterface SearchResult {\n  id: string;\n  score: string;\n  text: string;\n  category?: string;\n}\n\ninterface ChatMessage {\n  role: 'user' | 'system';\n  content: string;\n}\n\ninterface ChatRequest {\n  messages: ChatMessage[];\n}\n\ninterface ChatResponse {\n  message: string;\n  searchResults: SearchResult[];\n}\n\nconst groq = new Groq({\n  apiKey: process.env.GROQ_API_KEY,\n});\n\nconst SYSTEM_PROMPT = `You are a Healthcare Price Transparency Assistant for California hospitals. Your task is to:\n1. Analyze the provided procedure descriptions\n2. Explain the matches in simple terms\n3. Highlight the most relevant procedures\nMake your responses concise and easy to understand.`;\n\nexport async function POST(req: Request) {\n  try {\n    const { messages } = await req.json() as ChatRequest;\n    const lastMessage = messages[messages.length - 1];\n    const userQuery = lastMessage.content;\n\n    // Call Python FastAPI server for search\n    console.log('Executing search with query:', userQuery);\n    \n    try {\n      const searchResponse = await fetch('http://127.0.0.1:8000/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query: userQuery }),\n      });\n\n      if (!searchResponse.ok) {\n        const errorData = await searchResponse.text();\n        throw new Error(`Search API error: ${errorData}`);\n      }\n\n      const searchResults = await searchResponse.json() as { results: SearchResult[] };\n      console.log('Search results:', JSON.stringify(searchResults, null, 2));\n\n      // Format context for AI\n      const searchContext = searchResults.results\n        .map((hit: SearchResult) => `${hit.text} (Score: ${hit.score})`)\n        .join('\\n');\n\n      // Get AI response using search results\n      const completion = await groq.chat.completions.create({\n        messages: [\n          { role: 'system', content: SYSTEM_PROMPT },\n          { role: 'user', content: `Query: ${userQuery}\\n\\nRelevant procedures found:\\n${searchContext}` }\n        ],\n        model: 'mixtral-8x7b-32768',\n        temperature: 0.5,\n        max_tokens: 500,\n      });\n\n      const response: ChatResponse = {\n        message: completion.choices[0]?.message?.content || 'No response generated',\n        searchResults: searchResults.results,\n      };\n\n      return NextResponse.json(response);\n\n    } catch (searchError: unknown) {\n      console.error('Search API error:', searchError);\n      return NextResponse.json(\n        { error: `Failed to fetch search results: ${searchError instanceof Error ? searchError.message : 'Unknown error'}` },\n        { status: 500 }\n      );\n    }\n\n  } catch (error: unknown) {\n    console.error('Chat API error:', error);\n    return NextResponse.json(\n      { error: 'Failed to process chat request' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAuBA,MAAM,OAAO,IAAI,gNAAA,CAAA,OAAI,CAAC;IACpB,QAAQ,QAAQ,GAAG,CAAC,YAAY;AAClC;AAEA,MAAM,gBAAgB,CAAC;;;;mDAI4B,CAAC;AAE7C,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QACnC,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;QACjD,MAAM,YAAY,YAAY,OAAO;QAErC,wCAAwC;QACxC,QAAQ,GAAG,CAAC,gCAAgC;QAE5C,IAAI;YACF,MAAM,iBAAiB,MAAM,MAAM,gCAAgC;gBACjE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE,OAAO;gBAAU;YAC1C;YAEA,IAAI,CAAC,eAAe,EAAE,EAAE;gBACtB,MAAM,YAAY,MAAM,eAAe,IAAI;gBAC3C,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,WAAW;YAClD;YAEA,MAAM,gBAAgB,MAAM,eAAe,IAAI;YAC/C,QAAQ,GAAG,CAAC,mBAAmB,KAAK,SAAS,CAAC,eAAe,MAAM;YAEnE,wBAAwB;YACxB,MAAM,gBAAgB,cAAc,OAAO,CACxC,GAAG,CAAC,CAAC,MAAsB,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC,EAC9D,IAAI,CAAC;YAER,uCAAuC;YACvC,MAAM,aAAa,MAAM,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;gBACpD,UAAU;oBACR;wBAAE,MAAM;wBAAU,SAAS;oBAAc;oBACzC;wBAAE,MAAM;wBAAQ,SAAS,CAAC,OAAO,EAAE,UAAU,gCAAgC,EAAE,eAAe;oBAAC;iBAChG;gBACD,OAAO;gBACP,aAAa;gBACb,YAAY;YACd;YAEA,MAAM,WAAyB;gBAC7B,SAAS,WAAW,OAAO,CAAC,EAAE,EAAE,SAAS,WAAW;gBACpD,eAAe,cAAc,OAAO;YACtC;YAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAE3B,EAAE,OAAO,aAAsB;YAC7B,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,gCAAgC,EAAE,uBAAuB,QAAQ,YAAY,OAAO,GAAG,iBAAiB;YAAC,GACnH;gBAAE,QAAQ;YAAI;QAElB;IAEF,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}