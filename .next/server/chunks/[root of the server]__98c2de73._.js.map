{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/74run/my-next-app/src/app/api/chat/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nconst SYSTEM_PROMPT = `You are a Healthcare Price Transparency Assistant for California hospitals.`;\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { messages } = await req.json();\r\n    \r\n    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'llama-3.1-8b-instant',\r\n        messages: [\r\n          { role: 'system', content: SYSTEM_PROMPT },\r\n          ...messages.map((msg: any) => ({\r\n            role: msg.sender === 'user' ? 'user' : 'assistant',\r\n            content: msg.text,\r\n          })),\r\n        ],\r\n        temperature: 0.7,\r\n        max_tokens: 1024,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      console.error('Groq API error details:', errorData);\r\n      throw new Error(`Groq API error: ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return NextResponse.json({\r\n      message: data.choices[0].message.content,\r\n    });\r\n  } catch (error) {\r\n    console.error('Chat API error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to process chat request' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,CAAC,2EAA2E,CAAC;AAE5F,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,MAAM,WAAW,MAAM,MAAM,mDAAmD;YAC9E,QAAQ;YACR,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAE;gBACrD,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO;gBACP,UAAU;oBACR;wBAAE,MAAM;wBAAU,SAAS;oBAAc;uBACtC,SAAS,GAAG,CAAC,CAAC,MAAa,CAAC;4BAC7B,MAAM,IAAI,MAAM,KAAK,SAAS,SAAS;4BACvC,SAAS,IAAI,IAAI;wBACnB,CAAC;iBACF;gBACD,aAAa;gBACb,YAAY;YACd;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC;YACvD,QAAQ,KAAK,CAAC,2BAA2B;YACzC,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE,SAAS,UAAU,EAAE;QAC1D;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS,KAAK,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;QAC1C;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}